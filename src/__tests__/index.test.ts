import { LazyAuth, KeycloakConfig, ServiceConfig } from '..';
import { testRealm, testPublicClient } from './utils/realm';
import { MockNotificationClientSdk } from './utils/MockNotificationSdkClient';
import { beforeAll, describe, it, afterAll, expect } from 'vitest';
import { MongoMemoryServer } from 'mongodb-memory-server';
import { KcApi } from '../modules/kcApi';
import request from 'supertest';
import mongoose from 'mongoose';

// npm install --save-dev mongodb-memory-server --prefer-offline

const keycloakConfig: KeycloakConfig = {
    keycloakServiceUrl: 'http://localhost:8080',
    keycloakAdminPassword: 'admin',
};

const serverConfig: ServiceConfig = {
    port: 8999,
    allowedOrigins: ['*'],
    routerPrefix: '/api/v1',
    mongoDbUrl: '',
    enableRoutesLogging: true,
    enableRealmSummary: true,
    enableServiceLogging: true,
    enableRequestLogging: true,
};

describe('Lazy Auth Testing Suite', () => {
    let mongoServer: MongoMemoryServer;
    let lazyAuthService: LazyAuth;
    let kcApi: KcApi;
    beforeAll(async () => {
        try {
            mongoServer = await MongoMemoryServer.create();
            const mongoDbUrl = mongoServer.getUri();
            serverConfig.mongoDbUrl = mongoDbUrl;

            const notificationSdk = new MockNotificationClientSdk();

            lazyAuthService = new LazyAuth(
                keycloakConfig,
                serverConfig,
                testRealm,
                notificationSdk,
            );

            kcApi = await KcApi.create({
                url: keycloakConfig.keycloakServiceUrl,
                password: keycloakConfig.keycloakAdminPassword,
                realmName: testRealm.name,
                reAuthenticateIntervalMs: 5000,
            });
            await kcApi.realms.deleteRealm();
        } catch (error) {
            console.error(error);
        }
    }, 0);

    afterAll(async () => {
        try {
            await mongoServer.stop();
        } catch (error) {
            console.error(error);
        }
    }, 0);

    it('should start the server', async () => {
        await lazyAuthService.start();

        expect(lazyAuthService.app.expressApp).toBeDefined();

        const realmExist = await kcApi.realms.realmExists();
        expect(realmExist).toBe(true);
    });

    it('the `routerPrevix`/`realmName`/ping should return pong as plain text', async () => {
        const realmPathname = `/api/v1/${testRealm.name}/ping`;
        await request(lazyAuthService.app.expressApp)
            .get(realmPathname)
            .expect((res) => {
                expect(res.text).toBe('pong');
                expect(res.statusCode).toBe(200);
            });
    });

    describe('testing public client', () => {
        const routerPrefix = serverConfig.routerPrefix;
        const registerPath = '/register';
        const loginPath = '/login';
        const verifyPath = '/me/verify';
        const validateAccessTokenPath = '/validate-access-token';
        const refreshAccessTokenPath = '/refresh-access-token';
        const updatePasswordPath = '/me/password';
        /**
         *
         * client name is the name that used in url and group under app group
         */
        const clientName = testPublicClient.name;
        /**
         * client id is the id that used in keycloak public clients
         * the client id is auto generated by App Constructor when adding the client to the app
         * the client id is app name + "-" + client name
         * the client id is different from the client uuid which is id of the public client in database
         */
        const clientId = testPublicClient.clientId;
        /**
         * app path is the path that used in url "/realm-name/app-name"
         */
        const appPath = testPublicClient.appPath;
        /**
         * client path is the path that used in url "/realm-name/app-name/client-name"
         */
        const clientPath = appPath + '/' + clientName;

        /**
         * variables should be defined
         * @example
         * clientName: 'public-client'
         * clientId: 'test-app-public-client'
         * appPath: '/test-realm/test-app'
         * clientPath: '/test-realm/test-app/public-client'
         */
        it('variables should be defined', () => {
            expect(clientName).toBeDefined();
            expect(clientId).toBeDefined();
            expect(appPath).toBeDefined();
            expect(clientPath).toBeDefined();
            const realmName = testRealm.name;
            const appName = testPublicClient.appName;
            expect(clientName).toBe('public-client');
            expect(clientId).toBe(`${appName}-${clientName}`);
            expect(appPath).toBe(`/${realmName}/${appName}`);
            expect(clientPath).toBe(`/${realmName}/${appName}/${clientName}`);
        });

        let newUser = {
            method: 'email',
            email: 'testuser@example.com',
            password: 'TestPassword123!',
        };

        it('should register a user', async () => {
            const verifiedByDefault =
                testPublicClient.clientAuthConfiguration.registerConfig
                    .status === 'public' &&
                testPublicClient.clientAuthConfiguration.registerConfig
                    .verified;
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${registerPath}`)
                .set('Content-Type', 'application/json')
                .send({
                    method: newUser.method,
                    email: newUser.email,
                    password: newUser.password,
                })
                .expect((res) => {
                    const data = res.body.data;
                    expect(data).toBeDefined();
                    expect(data._id).toBeDefined();
                    expect(data.username).toBeDefined();
                    expect(data.method).toBe(newUser.method);
                    expect(data.email).toBe(newUser.email);
                    expect(data.verified).toBe(verifiedByDefault);
                    expect(data.createdAt).toBeDefined();
                });
        });
        it('should throw for same email', async () => {
            const duplicateUser = newUser;
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${registerPath}`)
                .set('Content-Type', 'application/json')
                .send({
                    method: duplicateUser.method,
                    email: duplicateUser.email,
                    password: duplicateUser.password,
                })
                .expect((res) => {
                    // Test error structure
                    expect(res.body).toHaveProperty('error');
                    expect(res.body.error).toHaveProperty('code');
                    expect(res.body.error).toHaveProperty('label');
                    expect(res.body.error).toHaveProperty('date');
                });
        });
        it('should throw for invalid email', async () => {
            const invalidEmail = {
                method: 'email',
                email: 'invalidemail',
                password: 'TestPassword123!',
            };
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${registerPath}`)
                .set('Content-Type', 'application/json')
                .send(invalidEmail)
                .expect((res) => {
                    expect(res.body).toHaveProperty('error');
                    expect(res.body.error).toHaveProperty('code');
                    expect(res.body.error).toHaveProperty('label');
                    expect(res.body.error).toHaveProperty('date');
                });
        });

        it('should throw for invalid method', async () => {
            const invalidMethod = {
                method: 'invalidmethod',
                email: 'testuser@example.com',
                password: 'TestPassword123!',
            };
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${registerPath}`)
                .set('Content-Type', 'application/json')
                .send(invalidMethod)
                .expect((res) => {
                    expect(res.body).toHaveProperty('error');
                    expect(res.body.error).toHaveProperty('code');
                    expect(res.body.error).toHaveProperty('label');
                    expect(res.body.error).toHaveProperty('date');
                });
        });
        it('should login with no token if user is not verified', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${loginPath}`)
                .set('Content-Type', 'application/json')
                .send(newUser)
                .expect((res) => {
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.token).toBeNull();
                    expect(res.body.data.user).toBeDefined();
                    expect(res.body.data.user.verified).toBe(false);
                    expect(res.body.data.user.method).toBe(newUser.method);
                    expect(res.body.data.user.email).toBe(newUser.email);
                    expect(res.body.data.user.username).toBeDefined();
                    expect(res.body.data.user.createdAt).toBeDefined();
                    expect(res.body.data.user._id).toBeDefined();
                });
        });
        it('should verify the user', async () => {
            const user = await mongoose.connection.db
                ?.collection('users')
                .findOne({
                    email: newUser.email,
                });
            const code = user?.linkedEmails[0].confirmCode;
            await request(lazyAuthService.app.expressApp)
                .put(`${routerPrefix}${clientPath}${verifyPath}`)
                .set('Content-Type', 'application/json')
                .send({
                    method: newUser.method,
                    email: newUser.email,
                    code: code,
                })
                .expect((res) => {
                    expect(res.body).toHaveProperty('success');
                    expect(res.body.success).toBe(true);
                    expect(res.body.data).toBeUndefined();
                });
        });
        let accessToken = '';
        let refreshToken = '';

        it('should login with token if user is verified', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${loginPath}`)
                .set('Content-Type', 'application/json')
                .send(newUser)
                .expect((res) => {
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.token).toBeDefined();
                    expect(res.body.data.token.accessToken).toBeDefined();
                    expect(res.body.data.token.refreshToken).toBeDefined();
                    expect(res.body.data.token.expiresIn).toBeDefined();
                    expect(res.body.data.token.refreshExpiresIn).toBeDefined();
                    expect(res.body.data.user).toBeDefined();
                    expect(res.body.data.user.verified).toBe(true);
                    accessToken = res.body.data.token.accessToken;
                    refreshToken = res.body.data.token.refreshToken;
                });
        });

        it('should validate access token and return the payload and _id', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${validateAccessTokenPath}`)
                .set('Content-Type', 'application/json')
                .set('Authorization', `Bearer ${accessToken}`)

                .expect((res) => {
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.sub).toBeDefined();
                    expect(res.body.data.exp).toBeDefined();
                    expect(res.body.data.iat).toBeDefined();
                    expect(res.body.data._id).toBeDefined();
                });
        });
        it('should throw for invalid access token', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${validateAccessTokenPath}`)
                .set('Content-Type', 'application/json')
                .set('Authorization', `Bearer invalidtoken`)
                .expect((res) => {
                    expect(res.body).toHaveProperty('error');
                });
        });
        it('should refresh the access token when send refresh token in headers', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${refreshAccessTokenPath}`)
                .set('Content-Type', 'application/json')
                .set('Authorization', `Bearer ${refreshToken}`)
                .expect((res) => {
                    console.log(res.body);
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.accessToken).toBeDefined();
                    expect(res.body.data.refreshToken).toBeDefined();
                    expect(res.body.data.expiresIn).toBeDefined();
                    expect(res.body.data.refreshExpiresIn).toBeDefined();
                });
        });

        it('should refresh the access token when send refresh token in body', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${refreshAccessTokenPath}`)
                .set('Content-Type', 'application/json')
                .send({ refreshToken: refreshToken })
                .expect((res) => {
                    console.log(res.body);
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.accessToken).toBeDefined();
                    expect(res.body.data.refreshToken).toBeDefined();
                    expect(res.body.data.expiresIn).toBeDefined();
                    expect(res.body.data.refreshExpiresIn).toBeDefined();
                });
        });

        it('should update the password', async () => {
            await request(lazyAuthService.app.expressApp)
                .put(`${routerPrefix}${clientPath}${updatePasswordPath}`)
                .set('Content-Type', 'application/json')
                .set('Authorization', `Bearer ${accessToken}`)
                .send({ newPassword: 'NewPassword123!' })
                .expect((res) => {
                    expect(res.body).toHaveProperty('success');
                    expect(res.body.success).toBe(true);
                });
        });

        it('should login with new password', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${loginPath}`)
                .set('Content-Type', 'application/json')
                .send({ ...newUser, password: 'NewPassword123!' })
                .expect((res) => {
                    expect(res.body).toHaveProperty('data');
                    expect(res.body.data.token).toBeDefined();
                    expect(res.body.data.token.accessToken).toBeDefined();
                    expect(res.body.data.token.refreshToken).toBeDefined();
                    expect(res.body.data.token.expiresIn).toBeDefined();
                    expect(res.body.data.token.refreshExpiresIn).toBeDefined();
                });
        });

        it('should throw for invalid password', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${loginPath}`)
                .set('Content-Type', 'application/json')
                .send({ ...newUser, password: 'InvalidPassword123!' })
                .expect((res) => {
                    expect(res.body).toHaveProperty('error');
                });
        });

        it('should throw for invalid username', async () => {
            await request(lazyAuthService.app.expressApp)
                .post(`${routerPrefix}${clientPath}${loginPath}`)
                .set('Content-Type', 'application/json')
                .send({ ...newUser, username: 'InvalidUsername123!' })
                .expect((res) => {
                    expect(res.body).toHaveProperty('error');
                });
        });
    });
});
