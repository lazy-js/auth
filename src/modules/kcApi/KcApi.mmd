---
config:
  layout: dagre
---
classDiagram
direction LR
        class KeycloakAdminClient {
	        +baseUrl: string
	        +realmName: string
	        +auth(config) : Promise
        }
        class KcApi {
	        +publicClients: PublicClientApi
	        +groups: GroupApi
	        +users: UserApi
	        +realms: RealmApi
	        -kcAdmin: KcAdmin
	        +static create(keycloakCreateObject: KeycloakCreateObject) : Promise~KcApi~
	        -constructor(kcAdmin: KcAdmin)
        }
        class KcAdmin {
	        +password: string
	        +kcOptions: KcOptions
	        +workingRealmName: string
	        +static create(keycloakCreateObject: KeycloakCreateObject) : Promise~KcAdmin~
	        -constructor(kcOptions: KcOptions, workingRealmName: string)
	        +adminRefreshSession() : Promise~void~
        }
        class RealmApi {
	        +kcAdmin: KcAdmin
	        +constructor(kcAdmin: KcAdmin)
	        +createRealm() : Promise
	        +realmExists() : Promise~boolean~
	        +deleteRealm() : Promise~boolean~
        }
        class UserApi {
	        +kcAdmin: KcAdmin
	        +constructor(kcAdmin: KcAdmin)
	        +createUser(user: UserRepresentation) : Promise
	        +removeDefaultRealmRolesFromUser(userId: string) : Promise~boolean~
	        +setUserPassword(payload: ResetPasswordPayload) : Promise~boolean~
	        +deleteUser(userId: string) : Promise~boolean~
	        +getUserById(userId: string) : Promise~UserRepresentation~
	        +getUsersByEmail(email: string) : Promise~UserRepresentation[]~
	        +getUserByUsername(username: string) : Promise~UserRepresentation~
	        +addUserToGroup(payload: AddUserToGroupPayload) : Promise~string~
	        +setUserVerified(userId: string) : Promise~boolean~
	        +getUserProfileConfig() : Promise~UserProfileConfig~
	        +getUserGroups(userId: string) : Promise~GroupRepresentation[]~
	        +updateUserProileConfig(userProfileConfig: UserProfileConfig) : Promise~UserProfileConfig~
	        +loginWithUsername(payload: LoginWithUsernamePayload) : Promise~TokenResponse~
	        +validateAccessToken(accessToken: string) : Promise~JWTVerifyResult~
	        +refreshAccessToken(payload: RefreshAccessTokenPayload) : Promise~TokenResponse~
        }
        class GroupApi {
	        +kcAdmin: KcAdmin
	        +constructor(kcAdmin: KcAdmin)
	        +doSomething() : void
	        +createGroup(payload: CreateGroupPayload) : Promise
	        +createChildGroup(payload: CreateChildGroupPayload) : Promise
	        +getSubGroupsByParentId(parentId: string) : Promise~GroupRepresentation[]~
	        +getGroupByPath(path: string) : Promise~GroupRepresentation~
	        +getGroupsByParentPath(parentPath: string) : Promise~GroupRepresentation[]~
	        +getGroupById(groupId: string) : Promise~GroupRepresentation~
	        +groupExists(groupId: string) : Promise~boolean~
	        +getGroupByName(groupName: string) : Promise~GroupRepresentation~
	        +mapClientRoleToGroup(payload: MapRolePayload) : Promise~boolean~
	        +addAttributesToGroup(payload: AddAttributesPayload) : Promise~boolean~
        }
        class PublicClientApi {
	        +kcAdmin: KcAdmin
	        +constructor(kcAdmin: KcAdmin)
	        +create(payload: CreateClientPayload) : Promise
	        +getOneByUuid(clientUuid: string) : Promise~ClientRepresentation~
	        +getOneByClientId(clientId: string) : Promise~ClientRepresentation~
	        +addRole(payload: AddRolePayload) : Promise~RoleRepresentation~
	        +addChildRole(payload: AddChildRolePayload) : Promise~RoleRepresentation~
	        +getRoleById(payload: GetRoleByIdPayload) : Promise~RoleRepresentation~
	        +getRolesByClientUuid(payload: GetRolesPayload) : Promise~RoleRepresentation[]~
	        +getRoleByName(payload: GetRoleByNamePayload) : Promise~RoleRepresentation~
	        +getRolesByParentId(payload: GetRolesByParentPayload) : Promise~RoleRepresentation[]~
        }
        class KeycloakCreateObject {
	        +url: string
	        +password: string
	        +realmName: string
        }
        class Attributes {
	        +[key: string]: string[]
        }
	

    KeycloakAdminClient <|-- KcAdmin : extends
    KcApi --> KcAdmin : uses
    KcApi --> RealmApi : creates
    KcApi --> UserApi : creates
    KcApi --> GroupApi : creates
    KcApi --> PublicClientApi : creates
    RealmApi --> KcAdmin : uses
    UserApi --> KcAdmin : uses
    GroupApi --> KcAdmin : uses
    PublicClientApi --> KcAdmin : uses
    KcApi ..> KeycloakCreateObject : uses
    GroupApi ..> Attributes : uses
